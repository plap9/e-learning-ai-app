name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  # Lint v√† Test cho Node.js services
  test-nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, user-service, content-service, payment-service]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint ${{ matrix.service }}
        run: pnpm --filter @elearning/${{ matrix.service }} lint
        
      - name: Test ${{ matrix.service }}
        run: pnpm --filter @elearning/${{ matrix.service }} test
        
      - name: Build ${{ matrix.service }}
        run: pnpm --filter @elearning/${{ matrix.service }} build

  # Test cho Python services
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ai-service, audio-processing-service]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          cd packages/${{ matrix.service }}
          pip install -r requirements.txt
          
      - name: Lint with flake8
        run: |
          cd packages/${{ matrix.service }}
          flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
          
      - name: Test with pytest
        run: |
          cd packages/${{ matrix.service }}
          pytest tests/ -v

  # Test shared packages
  test-shared:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package: [common-types, auth-utils, logger, config-utils]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build ${{ matrix.package }}
        run: pnpm --filter @elearning/${{ matrix.package }} build

  # Test mobile app
  test-mobile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type check mobile app
        run: pnpm --filter @elearning/mobile-app type-check
        
      - name: Lint mobile app
        run: pnpm --filter @elearning/mobile-app lint
        
      - name: Test mobile app
        run: pnpm --filter @elearning/mobile-app test

  # Build Docker images
  build-docker:
    runs-on: ubuntu-latest
    needs: [test-nodejs, test-python, test-shared, test-mobile]
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [api-gateway, user-service, content-service, payment-service, ai-service, audio-processing-service]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push ${{ matrix.service }}
        uses: docker/build-push-action@v5
        with:
          context: ./packages/${{ matrix.service }}
          file: ./packages/${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/elearning-${{ matrix.service }}:latest
            ${{ secrets.DOCKER_USERNAME }}/elearning-${{ matrix.service }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/develop'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment commands here
          
  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here 