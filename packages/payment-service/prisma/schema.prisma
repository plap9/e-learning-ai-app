// Payment Service Prisma Schema - VietQR Only
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// PAYMENT MANAGEMENT - VIETQR ONLY
// ================================

model Payment {
  id            String           @id @default(cuid())
  userId        String
  amount        Decimal          @db.Decimal(10, 2)
  currency      String           @default("VND")
  status        PaymentStatus    @default(PENDING)
  
  // VietQR specific fields
  qrCode        String?          // Base64 encoded QR code
  qrCodeUrl     String?          // URL to QR code image
  bankCode      String?          // Bank code (VCB, TCB, etc.)
  accountNumber String?          // Bank account number
  transferContent String?        // Transfer content/memo
  
  description   String?
  metadata      Json?            // Additional payment data

  // Subscription relation
  subscriptionId String?
  subscription   Subscription?   @relation(fields: [subscriptionId], references: [id])

  // Course purchase relation  
  courseId      String?
  courseName    String?
  coursePrice   Decimal?         @db.Decimal(10, 2)

  // Timestamps
  paidAt        DateTime?
  expiredAt     DateTime?        // QR code expiration
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

model Subscription {
  id              String              @id @default(cuid())
  userId          String
  plan            SubscriptionPlan
  status          SubscriptionStatus  @default(ACTIVE)
  
  // Pricing (VND only)
  monthlyPrice    Decimal             @db.Decimal(12, 0) // VND doesn't use decimals
  yearlyPrice     Decimal?            @db.Decimal(12, 0)
  currency        String              @default("VND")
  
  // Billing
  billingCycle    BillingCycle        @default(MONTHLY)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  nextBillingDate    DateTime?
  
  // Cancellation
  cancelAt         DateTime?
  canceledAt       DateTime?
  cancelReason     String?
  
  // Trial
  trialStart       DateTime?
  trialEnd         DateTime?
  
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relationships
  payments         Payment[]

  @@index([userId])
  @@index([status])
  @@index([plan])
  @@index([currentPeriodEnd])
  @@map("subscriptions")
}

model Invoice {
  id              String        @id @default(cuid())
  userId          String
  paymentId       String?
  subscriptionId  String?
  
  // Invoice details
  invoiceNumber   String        @unique
  amount          Decimal       @db.Decimal(12, 0) // VND
  currency        String        @default("VND")
  status          InvoiceStatus @default(DRAFT)
  
  // Dates
  issuedAt        DateTime
  dueAt           DateTime
  paidAt          DateTime?
  
  // Items
  items           Json          // Line items
  
  // Tax and discount (VND)
  subtotal        Decimal       @db.Decimal(12, 0)
  taxAmount       Decimal?      @db.Decimal(12, 0)
  discountAmount  Decimal?      @db.Decimal(12, 0)
  totalAmount     Decimal       @db.Decimal(12, 0)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([userId])
  @@index([status])
  @@index([invoiceNumber])
  @@map("invoices")
}

model Refund {
  id            String       @id @default(cuid())
  paymentId     String
  userId        String
  amount        Decimal      @db.Decimal(12, 0) // VND
  currency      String       @default("VND")
  reason        String?
  status        RefundStatus @default(PENDING)
  
  // Manual refund (admin processes)
  processedBy   String?      // Admin user ID
  bankTransferRef String?    // Bank transfer reference
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([paymentId])
  @@index([userId])
  @@index([status])
  @@map("refunds")
}

// ================================
// ENUMS - VIETQR FOCUSED
// ================================

enum PaymentStatus {
  PENDING
  PROCESSING
  SUCCEEDED
  FAILED
  EXPIRED
  CANCELED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELED
  PAST_DUE
  TRIALING
  UNPAID
}

enum BillingCycle {
  MONTHLY
  YEARLY
}

enum InvoiceStatus {
  DRAFT
  OPEN
  PAID
  VOID
  UNCOLLECTIBLE
}

enum RefundStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
} 