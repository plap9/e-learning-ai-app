generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  passwordHash         String
  firstName            String
  lastName             String
  avatar               String?
  dateOfBirth          DateTime?
  gender               Gender?
  phoneNumber          String?
  language             String               @default("en")
  timezone             String               @default("UTC")
  isActive             Boolean              @default(true)
  isVerified           Boolean              @default(false)
  verificationToken    String?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  lastLoginAt          DateTime?
  deletedAt            DateTime?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  audioRecordings      AudioRecording[]
  conversations        Conversation[]
  enrollments          Enrollment[]
  exerciseSubmissions  ExerciseSubmission[]
  flashcards           Flashcard[]
  progress             LearningProgress[]
  payments             Payment[]
  reviews              Review[]
  subscriptions        Subscription[]
  tokens               Token[]
  achievements         UserAchievement[]
  mistakes             UserMistake[]
  profile              UserProfile?
  sessions             UserSession[]

  @@index([email])
  @@index([isActive])
  @@index([isVerified])
  @@index([deletedAt])
  @@index([createdAt])
  @@map("users")
}

model UserProfile {
  id                  String           @id @default(cuid())
  userId              String           @unique
  currentLevel        ProficiencyLevel @default(BEGINNER)
  targetLevel         ProficiencyLevel @default(INTERMEDIATE)
  learningGoals       String[]
  interests           String[]
  preferredTopics     String[]
  studyTimePerDay     Int?
  reminderTime        String?
  isPublic            Boolean          @default(false)
  bio                 String?
  visualLearning      Boolean          @default(true)
  auditoryLearning    Boolean          @default(true)
  kinestheticLearning Boolean          @default(false)
  currentStreak       Int              @default(0)
  longestStreak       Int              @default(0)
  lastStudyDate       DateTime?
  totalStudyDays      Int              @default(0)
  totalStudyTime      Int              @default(0)
  weeklyGoalMinutes   Int              @default(150)
  monthlyGoalMinutes  Int              @default(600)
  deletedAt           DateTime?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([currentLevel])
  @@index([currentStreak])
  @@index([longestStreak])
  @@index([lastStudyDate])
  @@index([deletedAt])
  @@map("user_profiles")
}

model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([expiresAt])
  @@map("user_sessions")
}

model Token {
  id        String    @id @default(cuid())
  userId    String
  type      TokenType
  token     String    @unique
  expiresAt DateTime
  isUsed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([type])
  @@index([expiresAt])
  @@index([isUsed])
  @@map("tokens")
}

model Course {
  id               String               @id @default(cuid())
  title            String
  description      String
  shortDescription String?
  thumbnail        String?
  level            ProficiencyLevel
  category         CourseCategory
  tags             String[]
  language         String               @default("en")
  estimatedHours   Float?
  price            Decimal?             @db.Decimal(10, 2)
  isPublished      Boolean              @default(false)
  isFree           Boolean              @default(false)
  order            Int?
  slug             String               @unique
  metaTitle        String?
  metaDescription  String?
  isAiGenerated    Boolean              @default(false)
  aiPrompt         String?
  totalEnrollments Int                  @default(0)
  averageRating    Float?
  deletedAt        DateTime?
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  prerequisites    CoursePrerequisite[] @relation("CoursePrerequisites")
  dependents       CoursePrerequisite[] @relation("DependentCourses")
  enrollments      Enrollment[]
  lessons          Lesson[]
  reviews          Review[]

  @@index([level])
  @@index([category])
  @@index([isPublished])
  @@index([isFree])
  @@index([language])
  @@index([totalEnrollments])
  @@index([averageRating])
  @@index([deletedAt])
  @@index([createdAt])
  @@index([slug])
  @@map("courses")
}

model CoursePrerequisite {
  id             String @id @default(cuid())
  courseId       String
  prerequisiteId String
  course         Course @relation("CoursePrerequisites", fields: [courseId], references: [id], onDelete: Cascade)
  prerequisite   Course @relation("DependentCourses", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@unique([courseId, prerequisiteId])
  @@index([courseId])
  @@index([prerequisiteId])
  @@map("course_prerequisites")
}

model Lesson {
  id              String             @id @default(cuid())
  courseId        String
  title           String
  description     String?
  content         String
  contentType     ContentType        @default(TEXT)
  videoUrl        String?
  audioUrl        String?
  duration        Int?
  order           Int
  isPublished     Boolean            @default(false)
  isAiGenerated   Boolean            @default(false)
  aiPrompt        String?
  difficulty      DifficultyLevel    @default(INTERMEDIATE)
  completionCount Int                @default(0)
  deletedAt       DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  exercises       Exercise[]
  flashcards      Flashcard[]
  progress        LearningProgress[]
  course          Course             @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([isPublished])
  @@index([difficulty])
  @@index([order])
  @@index([deletedAt])
  @@map("lessons")
}

model Exercise {
  id            String               @id @default(cuid())
  lessonId      String
  title         String
  description   String?
  type          ExerciseType
  content       Json
  correctAnswer Json?
  explanation   String?
  points        Int                  @default(10)
  timeLimit     Int?
  order         Int
  isAiGenerated Boolean              @default(false)
  aiPrompt      String?
  difficulty    DifficultyLevel      @default(INTERMEDIATE)
  attemptCount  Int                  @default(0)
  successRate   Float                @default(0)
  averageScore  Float                @default(0)
  deletedAt     DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  submissions   ExerciseSubmission[]
  lesson        Lesson               @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@index([lessonId])
  @@index([type])
  @@index([difficulty])
  @@index([order])
  @@index([deletedAt])
  @@map("exercises")
}

model ExerciseSubmission {
  id         String   @id @default(cuid())
  exerciseId String
  userId     String
  answer     Json
  isCorrect  Boolean
  score      Float
  timeSpent  Int?
  attempts   Int      @default(1)
  feedback   String?
  createdAt  DateTime @default(now())
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([exerciseId, userId])
  @@index([exerciseId])
  @@index([userId])
  @@index([isCorrect])
  @@index([score])
  @@index([createdAt])
  @@map("exercise_submissions")
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  progress    Float     @default(0)
  isCompleted Boolean   @default(false)
  startedAt   DateTime  @default(now())
  completedAt DateTime?
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([isCompleted])
  @@index([progress])
  @@index([startedAt])
  @@map("enrollments")
}

model LearningProgress {
  id             String    @id @default(cuid())
  userId         String
  lessonId       String
  isCompleted    Boolean   @default(false)
  timeSpent      Int       @default(0)
  score          Float?
  attempts       Int       @default(0)
  lastAccessedAt DateTime  @default(now())
  completedAt    DateTime?
  lesson         Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([isCompleted])
  @@index([lastAccessedAt])
  @@map("learning_progress")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([earnedAt])
  @@map("user_achievements")
}

model Achievement {
  id          String            @id @default(cuid())
  title       String
  description String
  icon        String?
  type        AchievementType
  criteria    Json
  points      Int               @default(0)
  isActive    Boolean           @default(true)
  deletedAt   DateTime?
  createdAt   DateTime          @default(now())
  users       UserAchievement[]

  @@index([type])
  @@index([isActive])
  @@index([deletedAt])
  @@map("achievements")
}

model Flashcard {
  id             String            @id @default(cuid())
  userId         String
  lessonId       String?
  front          String
  back           String
  notes          String?
  cardType       FlashcardType     @default(VOCABULARY)
  nextReviewAt   DateTime          @default(now())
  interval       Int               @default(1)
  repetitions    Int               @default(0)
  easeFactor     Float             @default(2.5)
  quality        Int?
  totalReviews   Int               @default(0)
  correctReviews Int               @default(0)
  isActive       Boolean           @default(true)
  isMastered     Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  reviews        FlashcardReview[]
  lesson         Lesson?           @relation(fields: [lessonId], references: [id])
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, nextReviewAt])
  @@index([userId, isActive])
  @@index([userId, isMastered])
  @@index([lessonId])
  @@index([cardType])
  @@map("flashcards")
}

model FlashcardReview {
  id             String    @id @default(cuid())
  flashcardId    String
  userId         String
  quality        Int
  timeSpent      Int?
  wasCorrect     Boolean
  newInterval    Int
  newEaseFactor  Float
  newRepetitions Int
  reviewedAt     DateTime  @default(now())
  flashcard      Flashcard @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@index([flashcardId])
  @@index([userId, reviewedAt])
  @@map("flashcard_reviews")
}

model UserMistake {
  id            String          @id @default(cuid())
  userId        String
  mistakeType   MistakeType
  mistakeCode   String
  context       String?
  correction    String?
  count         Int             @default(1)
  severity      MistakeSeverity @default(MEDIUM)
  lastSeenAt    DateTime        @default(now())
  firstSeenAt   DateTime        @default(now())
  sourceType    String?
  sourceId      String?
  isResolved    Boolean         @default(false)
  practiceCount Int             @default(0)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, mistakeCode, context])
  @@index([userId, mistakeType])
  @@index([userId, mistakeCode])
  @@index([userId, isResolved])
  @@index([lastSeenAt])
  @@index([severity])
  @@map("user_mistakes")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String
  plan                 SubscriptionPlan
  status               SubscriptionStatus
  startDate            DateTime
  endDate              DateTime?
  autoRenew            Boolean            @default(true)
  stripeCustomerId     String?
  stripeSubscriptionId String?
  momoCustomerId       String?
  zalopayCustomerId    String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  payments             Payment[]
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([plan])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("subscriptions")
}

model Payment {
  id                   String          @id @default(cuid())
  userId               String
  subscriptionId       String?
  amount               Decimal         @db.Decimal(10, 2)
  currency             String          @default("USD")
  status               PaymentStatus
  provider             PaymentProvider
  stripePaymentId      String?
  momoTransactionId    String?
  zalopayTransactionId String?
  description          String?
  metadata             Json?
  failureReason        String?
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
  subscription         Subscription?   @relation(fields: [subscriptionId], references: [id])
  user                 User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([subscriptionId])
  @@index([provider])
  @@index([status])
  @@index([createdAt])
  @@index([amount])
  @@map("payments")
}

model Conversation {
  id           String                @id @default(cuid())
  userId       String
  title        String?
  topic        String?
  language     String                @default("en")
  difficulty   DifficultyLevel       @default(INTERMEDIATE)
  isActive     Boolean               @default(true)
  messageCount Int                   @default(0)
  deletedAt    DateTime?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  messages     ConversationMessage[]
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([language])
  @@index([difficulty])
  @@index([isActive])
  @@index([deletedAt])
  @@index([updatedAt])
  @@map("conversations")
}

model ConversationMessage {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String
  audioUrl       String?
  metadata       Json?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([role])
  @@index([createdAt])
  @@map("conversation_messages")
}

model AudioRecording {
  id                 String                @id @default(cuid())
  userId             String
  fileName           String
  originalText       String?
  transcribedText    String?
  audioUrl           String
  duration           Float?
  fileSize           Int?
  pronunciationScore Float?
  fluencyScore       Float?
  accuracyScore      Float?
  completenessScore  Float?
  overallScore       Float?
  feedback           String?
  suggestions        String[]
  processingStatus   AudioProcessingStatus @default(PENDING)
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  user               User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([processingStatus])
  @@index([overallScore])
  @@index([createdAt])
  @@map("audio_recordings")
}

model Review {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  rating      Int
  title       String?
  content     String?
  isPublished Boolean   @default(true)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
  @@index([rating])
  @@index([isPublished])
  @@index([deletedAt])
  @@index([createdAt])
  @@map("reviews")
}

enum TokenType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  TWO_FACTOR_AUTH
  API_ACCESS
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ProficiencyLevel {
  BEGINNER
  ELEMENTARY
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
  NATIVE
}

enum CourseCategory {
  GRAMMAR
  VOCABULARY
  CONVERSATION
  PRONUNCIATION
  LISTENING
  READING
  WRITING
  BUSINESS_ENGLISH
  EXAM_PREPARATION
  GENERAL_ENGLISH
}

enum ContentType {
  TEXT
  VIDEO
  AUDIO
  INTERACTIVE
  MIXED
}

enum DifficultyLevel {
  EASY
  INTERMEDIATE
  HARD
}

enum ExerciseType {
  MULTIPLE_CHOICE
  FILL_IN_BLANK
  DRAG_AND_DROP
  MATCHING
  SPEAKING
  LISTENING
  READING_COMPREHENSION
  WRITING
  TRANSLATION
  PRONUNCIATION
}

enum FlashcardType {
  VOCABULARY
  GRAMMAR
  PHRASE
  SENTENCE
  PRONUNCIATION
  LISTENING
}

enum MistakeType {
  GRAMMAR
  VOCABULARY
  PRONUNCIATION
  LISTENING
  SPEAKING
  WRITING
  READING
}

enum MistakeSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  CANCELLED
  EXPIRED
  TRIAL
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentProvider {
  STRIPE
  MOMO
  ZALOPAY
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum AudioProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum AchievementType {
  COURSE_COMPLETION
  LESSON_STREAK
  EXERCISE_MASTERY
  PRONUNCIATION_IMPROVEMENT
  DAILY_GOAL
  WEEKLY_GOAL
  MONTHLY_GOAL
  STREAK_MILESTONE
  FLASHCARD_MASTERY
}
